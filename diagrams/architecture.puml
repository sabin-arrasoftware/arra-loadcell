@startuml

class "main.py" {
    .. Entry point for Python app ..
}

class "ArduinoAppController" {
    - root : tkinter.Tk
    - scheduler : Scheduler 
    - callback_manager : CallbackManager
    - view_manager : ViewManager
    - communication : ArduinoCommunication
    + __init__(root: tkinter.Tk)
    + toggle_start()
    + read_weights()
    + clear_text()
    + calibrate()
    + update_settings()
}

class "Scheduler" {
    + __init__()
    + schedule(task_name, target_function, interval, delay)
    + stop(task_name)
    + _task_wrapper(task_name, target_function, interval, delay, stop_event)
}

class "CallbackManager" {
    + __init__()
    + register(event: Events, callback: function)
    + execute(event: Events)
}

class "ViewManager" {
    - root : tkinter.Tk
    - text_area : TextArea
    - buttons : ButtonsFrame
    - settings : Settings
    + __init__(root: tkinter.Tk, callback_manager: CallbackManager)
    + clear_text_area()
    + insert_text_area(txt)
    + get_setting_val(setting_name)
    + get_toggle_val()
    + ask(title, text)
    + inform(title, text)
}

class "TextArea" {
    + __init__(parent)
    + insert(text: str)
    + clear()
}

class "ButtonsFrame" {
    + __init__(parent, callback_manager: CallbackManager)
    + get_toggle_val()
}

class "Settings" {
    + __init__(parent, callback_manager: CallbackManager)
    + next_row()
    + get(name)
}

class "ArduinoCommunication" {
    - connection : serial.Serial
    + __init__(port: str, baudrate: int, timeout: int)
    + send_message(message)
    + read_message()
    + calibrate(scale_index, calibration_mass)
    + get_weights()
    + close()
}

"main.py" --> "ArduinoAppController" : starts

"ArduinoAppController" --> "Scheduler" : uses
"ArduinoAppController" --> "CallbackManager" : uses
"ArduinoAppController" --> "ViewManager" : uses
"ArduinoAppController" --> "ArduinoCommunication" : uses

"ViewManager" --> "TextArea" : uses
"ViewManager" --> "ButtonsFrame" : uses
"ViewManager" --> "Settings" : uses

@enduml
